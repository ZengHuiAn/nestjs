// Code generated by Prisma (prisma@1.25.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  surveyRecord: (where?: SurveyRecordWhereInput) => Promise<boolean>;
  wechatOfficalAccount: (
    where?: WechatOfficalAccountWhereInput
  ) => Promise<boolean>;
  wechatUser: (where?: WechatUserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  surveyRecord: (where: SurveyRecordWhereUniqueInput) => SurveyRecordPromise;
  surveyRecords: (args?: {
    where?: SurveyRecordWhereInput;
    orderBy?: SurveyRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SurveyRecord>;
  surveyRecordsConnection: (args?: {
    where?: SurveyRecordWhereInput;
    orderBy?: SurveyRecordOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SurveyRecordConnectionPromise;
  wechatOfficalAccount: (
    where: WechatOfficalAccountWhereUniqueInput
  ) => WechatOfficalAccountPromise;
  wechatOfficalAccounts: (args?: {
    where?: WechatOfficalAccountWhereInput;
    orderBy?: WechatOfficalAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WechatOfficalAccount>;
  wechatOfficalAccountsConnection: (args?: {
    where?: WechatOfficalAccountWhereInput;
    orderBy?: WechatOfficalAccountOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WechatOfficalAccountConnectionPromise;
  wechatUser: (where: WechatUserWhereUniqueInput) => WechatUserPromise;
  wechatUsers: (args?: {
    where?: WechatUserWhereInput;
    orderBy?: WechatUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<WechatUser>;
  wechatUsersConnection: (args?: {
    where?: WechatUserWhereInput;
    orderBy?: WechatUserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => WechatUserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSurveyRecord: (data: SurveyRecordCreateInput) => SurveyRecordPromise;
  updateSurveyRecord: (args: {
    data: SurveyRecordUpdateInput;
    where: SurveyRecordWhereUniqueInput;
  }) => SurveyRecordPromise;
  updateManySurveyRecords: (args: {
    data: SurveyRecordUpdateManyMutationInput;
    where?: SurveyRecordWhereInput;
  }) => BatchPayloadPromise;
  upsertSurveyRecord: (args: {
    where: SurveyRecordWhereUniqueInput;
    create: SurveyRecordCreateInput;
    update: SurveyRecordUpdateInput;
  }) => SurveyRecordPromise;
  deleteSurveyRecord: (
    where: SurveyRecordWhereUniqueInput
  ) => SurveyRecordPromise;
  deleteManySurveyRecords: (
    where?: SurveyRecordWhereInput
  ) => BatchPayloadPromise;
  createWechatOfficalAccount: (
    data: WechatOfficalAccountCreateInput
  ) => WechatOfficalAccountPromise;
  updateWechatOfficalAccount: (args: {
    data: WechatOfficalAccountUpdateInput;
    where: WechatOfficalAccountWhereUniqueInput;
  }) => WechatOfficalAccountPromise;
  updateManyWechatOfficalAccounts: (args: {
    data: WechatOfficalAccountUpdateManyMutationInput;
    where?: WechatOfficalAccountWhereInput;
  }) => BatchPayloadPromise;
  upsertWechatOfficalAccount: (args: {
    where: WechatOfficalAccountWhereUniqueInput;
    create: WechatOfficalAccountCreateInput;
    update: WechatOfficalAccountUpdateInput;
  }) => WechatOfficalAccountPromise;
  deleteWechatOfficalAccount: (
    where: WechatOfficalAccountWhereUniqueInput
  ) => WechatOfficalAccountPromise;
  deleteManyWechatOfficalAccounts: (
    where?: WechatOfficalAccountWhereInput
  ) => BatchPayloadPromise;
  createWechatUser: (data: WechatUserCreateInput) => WechatUserPromise;
  updateWechatUser: (args: {
    data: WechatUserUpdateInput;
    where: WechatUserWhereUniqueInput;
  }) => WechatUserPromise;
  updateManyWechatUsers: (args: {
    data: WechatUserUpdateManyMutationInput;
    where?: WechatUserWhereInput;
  }) => BatchPayloadPromise;
  upsertWechatUser: (args: {
    where: WechatUserWhereUniqueInput;
    create: WechatUserCreateInput;
    update: WechatUserUpdateInput;
  }) => WechatUserPromise;
  deleteWechatUser: (where: WechatUserWhereUniqueInput) => WechatUserPromise;
  deleteManyWechatUsers: (where?: WechatUserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  surveyRecord: (
    where?: SurveyRecordSubscriptionWhereInput
  ) => SurveyRecordSubscriptionPayloadSubscription;
  wechatOfficalAccount: (
    where?: WechatOfficalAccountSubscriptionWhereInput
  ) => WechatOfficalAccountSubscriptionPayloadSubscription;
  wechatUser: (
    where?: WechatUserSubscriptionWhereInput
  ) => WechatUserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SurveyRecordOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "htmlId_ASC"
  | "htmlId_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "questionSelected_ASC"
  | "questionSelected_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC";

export type WechatOfficalAccountOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "appId_ASC"
  | "appId_DESC"
  | "token_ASC"
  | "token_DESC"
  | "jsApiTicket_ASC"
  | "jsApiTicket_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type WechatUserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "openid_ASC"
  | "openid_DESC"
  | "nickname_ASC"
  | "nickname_DESC"
  | "sex_ASC"
  | "sex_DESC"
  | "country_ASC"
  | "country_DESC"
  | "province_ASC"
  | "province_DESC"
  | "city_ASC"
  | "city_DESC"
  | "headimgurl_ASC"
  | "headimgurl_DESC"
  | "unionid_ASC"
  | "unionid_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "deletedAt_ASC"
  | "deletedAt_DESC";

export interface WechatOfficalAccountUpdateInput {
  appId?: String;
  token?: String;
  jsApiTicket?: String;
  deletedAt?: String;
}

export interface WechatUserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  openid?: String;
  openid_not?: String;
  openid_in?: String[] | String;
  openid_not_in?: String[] | String;
  openid_lt?: String;
  openid_lte?: String;
  openid_gt?: String;
  openid_gte?: String;
  openid_contains?: String;
  openid_not_contains?: String;
  openid_starts_with?: String;
  openid_not_starts_with?: String;
  openid_ends_with?: String;
  openid_not_ends_with?: String;
  nickname?: String;
  nickname_not?: String;
  nickname_in?: String[] | String;
  nickname_not_in?: String[] | String;
  nickname_lt?: String;
  nickname_lte?: String;
  nickname_gt?: String;
  nickname_gte?: String;
  nickname_contains?: String;
  nickname_not_contains?: String;
  nickname_starts_with?: String;
  nickname_not_starts_with?: String;
  nickname_ends_with?: String;
  nickname_not_ends_with?: String;
  sex?: Int;
  sex_not?: Int;
  sex_in?: Int[] | Int;
  sex_not_in?: Int[] | Int;
  sex_lt?: Int;
  sex_lte?: Int;
  sex_gt?: Int;
  sex_gte?: Int;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  province?: String;
  province_not?: String;
  province_in?: String[] | String;
  province_not_in?: String[] | String;
  province_lt?: String;
  province_lte?: String;
  province_gt?: String;
  province_gte?: String;
  province_contains?: String;
  province_not_contains?: String;
  province_starts_with?: String;
  province_not_starts_with?: String;
  province_ends_with?: String;
  province_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  headimgurl?: String;
  headimgurl_not?: String;
  headimgurl_in?: String[] | String;
  headimgurl_not_in?: String[] | String;
  headimgurl_lt?: String;
  headimgurl_lte?: String;
  headimgurl_gt?: String;
  headimgurl_gte?: String;
  headimgurl_contains?: String;
  headimgurl_not_contains?: String;
  headimgurl_starts_with?: String;
  headimgurl_not_starts_with?: String;
  headimgurl_ends_with?: String;
  headimgurl_not_ends_with?: String;
  unionid?: String;
  unionid_not?: String;
  unionid_in?: String[] | String;
  unionid_not_in?: String[] | String;
  unionid_lt?: String;
  unionid_lte?: String;
  unionid_gt?: String;
  unionid_gte?: String;
  unionid_contains?: String;
  unionid_not_contains?: String;
  unionid_starts_with?: String;
  unionid_not_starts_with?: String;
  unionid_ends_with?: String;
  unionid_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  deletedAt?: String;
  deletedAt_not?: String;
  deletedAt_in?: String[] | String;
  deletedAt_not_in?: String[] | String;
  deletedAt_lt?: String;
  deletedAt_lte?: String;
  deletedAt_gt?: String;
  deletedAt_gte?: String;
  deletedAt_contains?: String;
  deletedAt_not_contains?: String;
  deletedAt_starts_with?: String;
  deletedAt_not_starts_with?: String;
  deletedAt_ends_with?: String;
  deletedAt_not_ends_with?: String;
  AND?: WechatUserWhereInput[] | WechatUserWhereInput;
  OR?: WechatUserWhereInput[] | WechatUserWhereInput;
  NOT?: WechatUserWhereInput[] | WechatUserWhereInput;
}

export interface SurveyRecordUpdateManyMutationInput {
  htmlId?: String;
  openid?: String;
  questionSelected?: Json;
  deletedAt?: String;
}

export type SurveyRecordWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface WechatOfficalAccountWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  appId?: String;
  appId_not?: String;
  appId_in?: String[] | String;
  appId_not_in?: String[] | String;
  appId_lt?: String;
  appId_lte?: String;
  appId_gt?: String;
  appId_gte?: String;
  appId_contains?: String;
  appId_not_contains?: String;
  appId_starts_with?: String;
  appId_not_starts_with?: String;
  appId_ends_with?: String;
  appId_not_ends_with?: String;
  token?: String;
  token_not?: String;
  token_in?: String[] | String;
  token_not_in?: String[] | String;
  token_lt?: String;
  token_lte?: String;
  token_gt?: String;
  token_gte?: String;
  token_contains?: String;
  token_not_contains?: String;
  token_starts_with?: String;
  token_not_starts_with?: String;
  token_ends_with?: String;
  token_not_ends_with?: String;
  jsApiTicket?: String;
  jsApiTicket_not?: String;
  jsApiTicket_in?: String[] | String;
  jsApiTicket_not_in?: String[] | String;
  jsApiTicket_lt?: String;
  jsApiTicket_lte?: String;
  jsApiTicket_gt?: String;
  jsApiTicket_gte?: String;
  jsApiTicket_contains?: String;
  jsApiTicket_not_contains?: String;
  jsApiTicket_starts_with?: String;
  jsApiTicket_not_starts_with?: String;
  jsApiTicket_ends_with?: String;
  jsApiTicket_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  deletedAt?: String;
  deletedAt_not?: String;
  deletedAt_in?: String[] | String;
  deletedAt_not_in?: String[] | String;
  deletedAt_lt?: String;
  deletedAt_lte?: String;
  deletedAt_gt?: String;
  deletedAt_gte?: String;
  deletedAt_contains?: String;
  deletedAt_not_contains?: String;
  deletedAt_starts_with?: String;
  deletedAt_not_starts_with?: String;
  deletedAt_ends_with?: String;
  deletedAt_not_ends_with?: String;
  AND?: WechatOfficalAccountWhereInput[] | WechatOfficalAccountWhereInput;
  OR?: WechatOfficalAccountWhereInput[] | WechatOfficalAccountWhereInput;
  NOT?: WechatOfficalAccountWhereInput[] | WechatOfficalAccountWhereInput;
}

export interface SurveyRecordWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  htmlId?: String;
  htmlId_not?: String;
  htmlId_in?: String[] | String;
  htmlId_not_in?: String[] | String;
  htmlId_lt?: String;
  htmlId_lte?: String;
  htmlId_gt?: String;
  htmlId_gte?: String;
  htmlId_contains?: String;
  htmlId_not_contains?: String;
  htmlId_starts_with?: String;
  htmlId_not_starts_with?: String;
  htmlId_ends_with?: String;
  htmlId_not_ends_with?: String;
  openid?: String;
  openid_not?: String;
  openid_in?: String[] | String;
  openid_not_in?: String[] | String;
  openid_lt?: String;
  openid_lte?: String;
  openid_gt?: String;
  openid_gte?: String;
  openid_contains?: String;
  openid_not_contains?: String;
  openid_starts_with?: String;
  openid_not_starts_with?: String;
  openid_ends_with?: String;
  openid_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  deletedAt?: String;
  deletedAt_not?: String;
  deletedAt_in?: String[] | String;
  deletedAt_not_in?: String[] | String;
  deletedAt_lt?: String;
  deletedAt_lte?: String;
  deletedAt_gt?: String;
  deletedAt_gte?: String;
  deletedAt_contains?: String;
  deletedAt_not_contains?: String;
  deletedAt_starts_with?: String;
  deletedAt_not_starts_with?: String;
  deletedAt_ends_with?: String;
  deletedAt_not_ends_with?: String;
  AND?: SurveyRecordWhereInput[] | SurveyRecordWhereInput;
  OR?: SurveyRecordWhereInput[] | SurveyRecordWhereInput;
  NOT?: SurveyRecordWhereInput[] | SurveyRecordWhereInput;
}

export interface SurveyRecordSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SurveyRecordWhereInput;
  AND?:
    | SurveyRecordSubscriptionWhereInput[]
    | SurveyRecordSubscriptionWhereInput;
  OR?:
    | SurveyRecordSubscriptionWhereInput[]
    | SurveyRecordSubscriptionWhereInput;
  NOT?:
    | SurveyRecordSubscriptionWhereInput[]
    | SurveyRecordSubscriptionWhereInput;
}

export interface WechatUserUpdateInput {
  openid?: String;
  nickname?: String;
  sex?: Int;
  country?: String;
  province?: String;
  city?: String;
  headimgurl?: String;
  unionid?: String;
  deletedAt?: String;
}

export interface SurveyRecordUpdateInput {
  htmlId?: String;
  openid?: String;
  questionSelected?: Json;
  deletedAt?: String;
}

export interface WechatOfficalAccountUpdateManyMutationInput {
  appId?: String;
  token?: String;
  jsApiTicket?: String;
  deletedAt?: String;
}

export interface WechatOfficalAccountCreateInput {
  appId: String;
  token?: String;
  jsApiTicket?: String;
  deletedAt?: String;
}

export interface WechatOfficalAccountSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WechatOfficalAccountWhereInput;
  AND?:
    | WechatOfficalAccountSubscriptionWhereInput[]
    | WechatOfficalAccountSubscriptionWhereInput;
  OR?:
    | WechatOfficalAccountSubscriptionWhereInput[]
    | WechatOfficalAccountSubscriptionWhereInput;
  NOT?:
    | WechatOfficalAccountSubscriptionWhereInput[]
    | WechatOfficalAccountSubscriptionWhereInput;
}

export type WechatUserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  openid?: String;
}>;

export interface SurveyRecordCreateInput {
  htmlId: String;
  openid: String;
  questionSelected: Json;
  deletedAt?: String;
}

export type WechatOfficalAccountWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  appId?: String;
}>;

export interface WechatUserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: WechatUserWhereInput;
  AND?: WechatUserSubscriptionWhereInput[] | WechatUserSubscriptionWhereInput;
  OR?: WechatUserSubscriptionWhereInput[] | WechatUserSubscriptionWhereInput;
  NOT?: WechatUserSubscriptionWhereInput[] | WechatUserSubscriptionWhereInput;
}

export interface WechatUserCreateInput {
  openid: String;
  nickname?: String;
  sex?: Int;
  country?: String;
  province?: String;
  city?: String;
  headimgurl?: String;
  unionid?: String;
  deletedAt?: String;
}

export interface WechatUserUpdateManyMutationInput {
  openid?: String;
  nickname?: String;
  sex?: Int;
  country?: String;
  province?: String;
  city?: String;
  headimgurl?: String;
  unionid?: String;
  deletedAt?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface WechatUserConnection {
  pageInfo: PageInfo;
  edges: WechatUserEdge[];
}

export interface WechatUserConnectionPromise
  extends Promise<WechatUserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WechatUserEdge>>() => T;
  aggregate: <T = AggregateWechatUserPromise>() => T;
}

export interface WechatUserConnectionSubscription
  extends Promise<AsyncIterator<WechatUserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<WechatUserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateWechatUserSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface WechatUserPreviousValues {
  id: ID_Output;
  openid: String;
  nickname?: String;
  sex?: Int;
  country?: String;
  province?: String;
  city?: String;
  headimgurl?: String;
  unionid?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: String;
}

export interface WechatUserPreviousValuesPromise
  extends Promise<WechatUserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  openid: () => Promise<String>;
  nickname: () => Promise<String>;
  sex: () => Promise<Int>;
  country: () => Promise<String>;
  province: () => Promise<String>;
  city: () => Promise<String>;
  headimgurl: () => Promise<String>;
  unionid: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<String>;
}

export interface WechatUserPreviousValuesSubscription
  extends Promise<AsyncIterator<WechatUserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  openid: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  headimgurl: () => Promise<AsyncIterator<String>>;
  unionid: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<String>>;
}

export interface SurveyRecordConnection {
  pageInfo: PageInfo;
  edges: SurveyRecordEdge[];
}

export interface SurveyRecordConnectionPromise
  extends Promise<SurveyRecordConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SurveyRecordEdge>>() => T;
  aggregate: <T = AggregateSurveyRecordPromise>() => T;
}

export interface SurveyRecordConnectionSubscription
  extends Promise<AsyncIterator<SurveyRecordConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SurveyRecordEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSurveyRecordSubscription>() => T;
}

export interface WechatUser {
  id: ID_Output;
  openid: String;
  nickname?: String;
  sex?: Int;
  country?: String;
  province?: String;
  city?: String;
  headimgurl?: String;
  unionid?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: String;
}

export interface WechatUserPromise extends Promise<WechatUser>, Fragmentable {
  id: () => Promise<ID_Output>;
  openid: () => Promise<String>;
  nickname: () => Promise<String>;
  sex: () => Promise<Int>;
  country: () => Promise<String>;
  province: () => Promise<String>;
  city: () => Promise<String>;
  headimgurl: () => Promise<String>;
  unionid: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<String>;
}

export interface WechatUserSubscription
  extends Promise<AsyncIterator<WechatUser>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  openid: () => Promise<AsyncIterator<String>>;
  nickname: () => Promise<AsyncIterator<String>>;
  sex: () => Promise<AsyncIterator<Int>>;
  country: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  headimgurl: () => Promise<AsyncIterator<String>>;
  unionid: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<String>>;
}

export interface WechatUserEdge {
  node: WechatUser;
  cursor: String;
}

export interface WechatUserEdgePromise
  extends Promise<WechatUserEdge>,
    Fragmentable {
  node: <T = WechatUserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WechatUserEdgeSubscription
  extends Promise<AsyncIterator<WechatUserEdge>>,
    Fragmentable {
  node: <T = WechatUserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWechatOfficalAccount {
  count: Int;
}

export interface AggregateWechatOfficalAccountPromise
  extends Promise<AggregateWechatOfficalAccount>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWechatOfficalAccountSubscription
  extends Promise<AsyncIterator<AggregateWechatOfficalAccount>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WechatOfficalAccountPreviousValues {
  id: ID_Output;
  appId: String;
  token?: String;
  jsApiTicket?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: String;
}

export interface WechatOfficalAccountPreviousValuesPromise
  extends Promise<WechatOfficalAccountPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  appId: () => Promise<String>;
  token: () => Promise<String>;
  jsApiTicket: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<String>;
}

export interface WechatOfficalAccountPreviousValuesSubscription
  extends Promise<AsyncIterator<WechatOfficalAccountPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  appId: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  jsApiTicket: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<String>>;
}

export interface SurveyRecordPreviousValues {
  id: ID_Output;
  htmlId: String;
  openid: String;
  questionSelected: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: String;
}

export interface SurveyRecordPreviousValuesPromise
  extends Promise<SurveyRecordPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  htmlId: () => Promise<String>;
  openid: () => Promise<String>;
  questionSelected: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<String>;
}

export interface SurveyRecordPreviousValuesSubscription
  extends Promise<AsyncIterator<SurveyRecordPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  htmlId: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  questionSelected: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<String>>;
}

export interface AggregateWechatUser {
  count: Int;
}

export interface AggregateWechatUserPromise
  extends Promise<AggregateWechatUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateWechatUserSubscription
  extends Promise<AsyncIterator<AggregateWechatUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface WechatOfficalAccountConnection {
  pageInfo: PageInfo;
  edges: WechatOfficalAccountEdge[];
}

export interface WechatOfficalAccountConnectionPromise
  extends Promise<WechatOfficalAccountConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<WechatOfficalAccountEdge>>() => T;
  aggregate: <T = AggregateWechatOfficalAccountPromise>() => T;
}

export interface WechatOfficalAccountConnectionSubscription
  extends Promise<AsyncIterator<WechatOfficalAccountConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<WechatOfficalAccountEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateWechatOfficalAccountSubscription>() => T;
}

export interface WechatUserSubscriptionPayload {
  mutation: MutationType;
  node: WechatUser;
  updatedFields: String[];
  previousValues: WechatUserPreviousValues;
}

export interface WechatUserSubscriptionPayloadPromise
  extends Promise<WechatUserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WechatUserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WechatUserPreviousValuesPromise>() => T;
}

export interface WechatUserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WechatUserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WechatUserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WechatUserPreviousValuesSubscription>() => T;
}

export interface SurveyRecordSubscriptionPayload {
  mutation: MutationType;
  node: SurveyRecord;
  updatedFields: String[];
  previousValues: SurveyRecordPreviousValues;
}

export interface SurveyRecordSubscriptionPayloadPromise
  extends Promise<SurveyRecordSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SurveyRecordPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SurveyRecordPreviousValuesPromise>() => T;
}

export interface SurveyRecordSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SurveyRecordSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SurveyRecordSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SurveyRecordPreviousValuesSubscription>() => T;
}

export interface WechatOfficalAccountSubscriptionPayload {
  mutation: MutationType;
  node: WechatOfficalAccount;
  updatedFields: String[];
  previousValues: WechatOfficalAccountPreviousValues;
}

export interface WechatOfficalAccountSubscriptionPayloadPromise
  extends Promise<WechatOfficalAccountSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = WechatOfficalAccountPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = WechatOfficalAccountPreviousValuesPromise>() => T;
}

export interface WechatOfficalAccountSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<WechatOfficalAccountSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = WechatOfficalAccountSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = WechatOfficalAccountPreviousValuesSubscription>() => T;
}

export interface WechatOfficalAccount {
  id: ID_Output;
  appId: String;
  token?: String;
  jsApiTicket?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: String;
}

export interface WechatOfficalAccountPromise
  extends Promise<WechatOfficalAccount>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  appId: () => Promise<String>;
  token: () => Promise<String>;
  jsApiTicket: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<String>;
}

export interface WechatOfficalAccountSubscription
  extends Promise<AsyncIterator<WechatOfficalAccount>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  appId: () => Promise<AsyncIterator<String>>;
  token: () => Promise<AsyncIterator<String>>;
  jsApiTicket: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<String>>;
}

export interface WechatOfficalAccountEdge {
  node: WechatOfficalAccount;
  cursor: String;
}

export interface WechatOfficalAccountEdgePromise
  extends Promise<WechatOfficalAccountEdge>,
    Fragmentable {
  node: <T = WechatOfficalAccountPromise>() => T;
  cursor: () => Promise<String>;
}

export interface WechatOfficalAccountEdgeSubscription
  extends Promise<AsyncIterator<WechatOfficalAccountEdge>>,
    Fragmentable {
  node: <T = WechatOfficalAccountSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSurveyRecord {
  count: Int;
}

export interface AggregateSurveyRecordPromise
  extends Promise<AggregateSurveyRecord>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSurveyRecordSubscription
  extends Promise<AsyncIterator<AggregateSurveyRecord>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SurveyRecord {
  id: ID_Output;
  htmlId: String;
  openid: String;
  questionSelected: Json;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  deletedAt?: String;
}

export interface SurveyRecordPromise
  extends Promise<SurveyRecord>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  htmlId: () => Promise<String>;
  openid: () => Promise<String>;
  questionSelected: () => Promise<Json>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  deletedAt: () => Promise<String>;
}

export interface SurveyRecordSubscription
  extends Promise<AsyncIterator<SurveyRecord>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  htmlId: () => Promise<AsyncIterator<String>>;
  openid: () => Promise<AsyncIterator<String>>;
  questionSelected: () => Promise<AsyncIterator<Json>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  deletedAt: () => Promise<AsyncIterator<String>>;
}

export interface SurveyRecordEdge {
  node: SurveyRecord;
  cursor: String;
}

export interface SurveyRecordEdgePromise
  extends Promise<SurveyRecordEdge>,
    Fragmentable {
  node: <T = SurveyRecordPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SurveyRecordEdgeSubscription
  extends Promise<AsyncIterator<SurveyRecordEdge>>,
    Fragmentable {
  node: <T = SurveyRecordSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Json = any;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "SurveyRecord",
    embedded: false
  },
  {
    name: "WechatOfficalAccount",
    embedded: false
  },
  {
    name: "WechatUser",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:3200`,
  secret: `casio-colorcat-apisecret`
});
export const prisma = new Prisma();
